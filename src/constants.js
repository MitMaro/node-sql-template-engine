'use strict';

export const TOKEN_TYPE_STRUCTURE = 'STRUCTURE';
export const TOKEN_TYPE_STATEMENT = 'STATEMENT';
export const TOKEN_TYPE_BOUNDARY = 'BOUNDARY';
export const TOKEN_TYPE_UNARY_OPERATOR = 'UNARY_OPERATOR';
export const TOKEN_TYPE_BINARY_OPERATOR = 'BINARY_OPERATOR';
export const TOKEN_TYPE_VALUE = 'VALUE';

export const TOKEN_STRUCTURE_TEXT_LITERAL = 'TEXT_LITERAL';
export const TOKEN_STRUCTURE_EOF = 'EOF';

export const TOKEN_STATEMENT_IF = 'IF';
export const TOKEN_STATEMENT_ELIF = 'ELIF';
export const TOKEN_STATEMENT_ELSE = 'ELSE';
export const TOKEN_STATEMENT_FI = 'FI';
export const TOKEN_STATEMENT_INCLUDE = 'INCLUDE';

export const TOKEN_BOUNDARY_TAG_START = 'TAG_START';
export const TOKEN_BOUNDARY_TAG_END = 'TAG_END';
export const TOKEN_BOUNDARY_BRACKET_OPEN = 'BRACKET_OPEN';
export const TOKEN_BOUNDARY_BRACKET_CLOSE = 'BRACKET_CLOSE';
export const TOKEN_BOUNDARY_STRING_SINGLE = 'STRING_SINGLE';
export const TOKEN_BOUNDARY_STRING_DOUBLE = 'STRING_DOUBLE';

export const OPERATOR_EQUALS = 'EQUALS';
export const OPERATOR_NOT_EQUALS = 'NOT_EQUALS';
export const OPERATOR_STRICT_EQUALS = 'STRICT_EQUALS';
export const OPERATOR_STRICT_NOT_EQUALS = 'STRICT_NOT_EQUALS';
export const OPERATOR_AND = 'AND';
export const OPERATOR_OR = 'OR';
export const OPERATOR_NOT = 'NOT';
export const OPERATOR_GREATER_THAN = 'GREATER_THAN';
export const OPERATOR_LESS_THAN = 'LESS_THAN';
export const OPERATOR_GREATER_EQUAL_THAN = 'GREATER_EQUAL_THAN';
export const OPERATOR_LESS_EQUAL_THAN = 'LESS_EQUAL_THAN';

export const TOKEN_VALUE_VARIABLE = 'VARIABLE';
export const TOKEN_VALUE_STRING = 'STRING';
export const TOKEN_VALUE_INTEGER = 'INTEGER';
export const TOKEN_VALUE_FLOAT = 'FLOAT';

export const PARSER_TYPE_ROOT = 'ROOT';
export const PARSER_TYPE_TEXT_LITERAL = 'LITERAL';
export const PARSER_TYPE_INCLUDE = 'INCLUDE';
export const PARSER_TYPE_VALUE = 'VALUE';
export const PARSER_TYPE_VARIABLE = 'VARIABLE';
export const PARSER_TYPE_BRANCH = 'BRANCH';
export const PARSER_TYPE_UNARY_OPERATOR = 'UNARY_OPERATOR';
export const PARSER_TYPE_BINARY_OPERATOR = 'BINARY_OPERATOR';
