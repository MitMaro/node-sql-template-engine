import {RuntimeTestCase} from '../runtime-test-case';

const values = [
	'"foo"',
	'""',
	'"-1.1"',
	'"-1"',
	'"0"',
	'"1"',
	'"1.1"',
	'-1.1',
	'-1',
	'0',
	'1',
	'1.1',
	'true',
	'false',
];

/* eslint-disable max-len */
const expressionOperatorMatrix: {[operator: string]: {[expression: string]: string[]}} = {
	'&&': {
		'"foo"': ['"foo"', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '1', '1.1', 'true'],
		'""': [],
		'"-1.1"': ['"foo"', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '1', '1.1', 'true'],
		'"-1"': ['"foo"', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '1', '1.1', 'true'],
		'"0"': ['"foo"', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '1', '1.1', 'true'],
		'"1"': ['"foo"', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '1', '1.1', 'true'],
		'"1.1"': ['"foo"', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '1', '1.1', 'true'],
		'-1.1': ['"foo"', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '1', '1.1', 'true'],
		'-1': ['"foo"', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '1', '1.1', 'true'],
		0: [],
		1: ['"foo"', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '1', '1.1', 'true'],
		1.1: ['"foo"', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '1', '1.1', 'true'],
		true: ['"foo"', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '1', '1.1', 'true'],
		false: [],
	},
	'||': {
		'"foo"': ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		'""': ['"foo"', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '1', '1.1', 'true'],
		'"-1.1"': ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		'"-1"': ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		'"0"': ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		'"1"': ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		'"1.1"': ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		'-1.1': ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		'-1': ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		0: ['"foo"', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '1', '1.1', 'true'],
		1: ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		1.1: ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		true: ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		false: ['"foo"', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '1', '1.1', 'true'],
	},
	'==': {
		'"foo"': ['"foo"'],
		'""': ['""', '0', 'false'],
		'"-1.1"': ['"-1.1"', '-1.1'],
		'"-1"': ['"-1"', '-1'],
		'"0"': ['"0"', '0', 'false'],
		'"1"': ['"1"', '1', 'true'],
		'"1.1"': ['"1.1"', '1.1'],
		'-1.1': ['"-1.1"', '-1.1'],
		'-1': ['"-1"', '-1'],
		0: ['""', '"0"', '0', 'false'],
		1: ['"1"', '1', 'true'],
		1.1: ['"1.1"', '1.1'],
		true: ['"1"', '1', 'true'],
		false: ['""', '"0"', '0', 'false'],
	},
	'!=': {
		'"foo"': ['""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		'""': ['"foo"', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '1', '1.1', 'true'],
		'"-1.1"': ['"foo"', '""', '"-1"', '"0"', '"1"', '"1.1"', '-1', '0', '1', '1.1', 'true', 'false'],
		'"-1"': ['"foo"', '""', '"-1.1"', '"0"', '"1"', '"1.1"', '-1.1', '0', '1', '1.1', 'true', 'false'],
		'"0"': ['"foo"', '""', '"-1.1"', '"-1"', '"1"', '"1.1"', '-1.1', '-1', '1', '1.1', 'true'],
		'"1"': ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1.1"', '-1.1', '-1', '0', '1.1', 'false'],
		'"1.1"': ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '-1.1', '-1', '0', '1', 'true', 'false'],
		'-1.1': ['"foo"', '""', '"-1"', '"0"', '"1"', '"1.1"', '-1', '0', '1', '1.1', 'true', 'false'],
		'-1': ['"foo"', '""', '"-1.1"', '"0"', '"1"', '"1.1"', '-1.1', '0', '1', '1.1', 'true', 'false'],
		0: ['"foo"', '"-1.1"', '"-1"', '"1"', '"1.1"', '-1.1', '-1', '1', '1.1', 'true'],
		1: ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1.1"', '-1.1', '-1', '0', '1.1', 'false'],
		1.1: ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '-1.1', '-1', '0', '1', 'true', 'false'],
		true: ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1.1"', '-1.1', '-1', '0', '1.1', 'false'],
		false: ['"foo"', '"-1.1"', '"-1"', '"1"', '"1.1"', '-1.1', '-1', '1', '1.1', 'true'],
	},
	'===': {
		'"foo"': ['"foo"'],
		'""': ['""'],
		'"-1.1"': ['"-1.1"'],
		'"-1"': ['"-1"'],
		'"0"': ['"0"'],
		'"1"': ['"1"'],
		'"1.1"': ['"1.1"'],
		'-1.1': ['-1.1'],
		'-1': ['-1'],
		0: ['0'],
		1: ['1'],
		1.1: ['1.1'],
		true: ['true'],
		false: ['false'],
	},
	'!==': {
		'"foo"': ['""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		'""': ['"foo"', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		'"-1.1"': ['"foo"', '""', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		'"-1"': ['"foo"', '""', '"-1.1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		'"0"': ['"foo"', '""', '"-1.1"', '"-1"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		'"1"': ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		'"1.1"': ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		'-1.1': ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1', '0', '1', '1.1', 'true', 'false'],
		'-1': ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '0', '1', '1.1', 'true', 'false'],
		0: ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '1', '1.1', 'true', 'false'],
		1: ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1.1', 'true', 'false'],
		1.1: ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', 'true', 'false'],
		true: ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'false'],
		false: ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true'],
	},
	'<': {
		'"foo"': [],
		'""': ['"foo"', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '1', '1.1', 'true'],
		'"-1.1"': ['"foo"', '"0"', '"1"', '"1.1"', '-1', '0', '1', '1.1', 'true', 'false'],
		'"-1"': ['"foo"', '"-1.1"', '"0"', '"1"', '"1.1"', '0', '1', '1.1', 'true', 'false'],
		'"0"': ['"foo"', '"1"', '"1.1"', '1', '1.1', 'true'],
		'"1"': ['"foo"', '"1.1"', '1.1'],
		'"1.1"': ['"foo"'],
		'-1.1': ['""', '"-1"', '"0"', '"1"', '"1.1"', '-1', '0', '1', '1.1', 'true', 'false'],
		'-1': ['""', '"0"', '"1"', '"1.1"', '0', '1', '1.1', 'true', 'false'],
		0: ['"1"', '"1.1"', '1', '1.1', 'true'],
		1: ['"1.1"', '1.1'],
		1.1: [],
		true: ['"1.1"', '1.1'],
		false: ['"1"', '"1.1"', '1', '1.1', 'true'],
	},
	'>': {
		'"foo"': ['""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"'],
		'""': ['-1', '-1.1'],
		'"-1.1"': ['""', '"-1"'],
		'"-1"': ['""', '-1.1'],
		'"0"': ['""', '"-1.1"', '"-1"', '-1.1', '-1'],
		'"1"': ['""', '"-1.1"', '"-1"', '"0"', '-1.1', '-1', '0', 'false'],
		'"1.1"': ['""', '"-1.1"', '"-1"', '"0"', '"1"', '-1.1', '-1', '0', '1', 'true', 'false'],
		'-1.1': [],
		'-1': ['"-1.1"', '-1.1'],
		0: ['"-1.1"', '"-1"', '-1.1', '-1', '1,1'],
		1: ['""', '"-1.1"', '"-1"', '"0"', '-1.1', '-1', '0', 'false'],
		1.1: ['""', '"-1.1"', '"-1"', '-1.1', '"0"', '"1"', '-1', '0', '1', 'true', 'false'],
		true: ['""', '"-1.1"', '"-1"', '"0"', '-1.1', '-1', '0', 'false'],
		false: ['"-1.1"', '"-1"', '-1.1', '-1'],
	},
	'>=': {
		'"foo"': ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"'],
		'""': ['""', '-1', '-1.1', '0', 'false'],
		'"-1.1"': ['""', '"-1.1"', '"-1"', '-1.1'],
		'"-1"': ['""', '"-1"', '-1.1', '-1'],
		'"0"': ['""', '"-1.1"', '"-1"', '"0"', '-1.1', '-1', '0', 'false'],
		'"1"': ['""', '"-1.1"', '"-1"', '"0"', '"1"', '-1.1', '-1', '0', '1', 'false', 'true'],
		'"1.1"': ['""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		'-1.1': ['"-1.1"', '-1.1'],
		'-1': ['"-1.1"', '"-1"', '-1', '-1.1'],
		0: ['""', '"-1.1"', '"-1"', '"0"', '-1.1', '-1', '0', '1,1', 'false'],
		1: ['""', '"-1.1"', '"-1"', '"0"', '"1"', '-1.1', '-1', '0', '1', 'true', 'false'],
		1.1: ['""', '"-1.1"', '"-1"', '"1.1"', '-1.1', '"0"', '"1"', '-1', '0', '1', '1.1', 'true', 'false'],
		true: ['""', '"-1.1"', '"-1"', '"0"', '"1"', '-1.1', '-1', '0', '1', 'true', 'false'],
		false: ['""', '"-1.1"', '"-1"', '"0"', '-1.1', '-1', '0', 'false'],
	},
	'<=': {
		'"foo"': ['"foo"'],
		'""': ['"foo"', '""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '0', '1', '1.1', 'true', 'false'],
		'"-1.1"': ['"foo"', '"-1.1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		'"-1"': ['"foo"', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1', '0', '1', '1.1', 'true', 'false'],
		'"0"': ['"foo"', '"0"', '"1"', '"1.1"', '0', '1', '1.1', 'true', 'false'],
		'"1"': ['"foo"', '"1"', '"1.1"', '1', '1.1', 'true'],
		'"1.1"': ['"foo"', '"1.1"', '1.1'],
		'-1.1': ['""', '"-1.1"', '"-1"', '"0"', '"1"', '"1.1"', '-1.1', '-1', '0', '1', '1.1', 'true', 'false'],
		'-1': ['""', '"-1"', '"0"', '"1"', '"1.1"', '-1', '0', '1', '1.1', 'true', 'false'],
		0: ['""', '"0"', '"1"', '"1.1"', '0', '1', '1.1', 'true', 'false'],
		1: ['"1"', '"1.1"', '1', '1.1', 'true'],
		1.1: ['"1.1"', '1.1'],
		true: ['"1"', '"1.1"', '1', '1.1', 'true'],
		false: ['""', '"0"', '"1"', '"1.1"', '0', '1', '1.1', 'true', 'false'],
	},
};
/* eslint-enable max-len */

const expressions: {[name: string]: boolean} = {};

for (const operator of Object.keys(expressionOperatorMatrix)) {
	for (const v1 of values) {
		for (const v2 of values) {
			expressions[`${v1} ${operator} ${v2}`] = expressionOperatorMatrix[operator][v1].includes(v2);
		}
	}
}

const testCases: RuntimeTestCase[] = [];
for (const expression in expressions) {
	testCases.push({
		description: `binary expression - ${expression} is ${expressions[expression]}`,
		template: 'index',
		templates: {
			index: [`{{ if ${expression} }}A{{ fi }}`],
		},
		input: {true: true, false: false},
		output: expressions[expression] === true ? ['A'] : [],
	});
}

export default testCases;
